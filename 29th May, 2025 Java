class Solution {

    public void sumOfRootToLeaf(Node root, int sum, int length, int[] maxLen,
                                int[] maxSum) {

        // Base case: if the current node is null
        if (root == null) {

            // Checking if the current path has a longer
            // length and update maxLen and maxSum
            // accordingly
            if (length > maxLen[0]) {
                maxLen[0] = length;
                maxSum[0] = sum;
            }

            // If the lengths are equal, check if the
            // current sum is greater and update maxSum if
            // necessary
            else if (length == maxLen[0] && sum > maxSum[0]) {
                maxSum[0] = sum;
            }
            return;
        }

        // Recursively calculating the sum of
        // the left and right subtrees
        sumOfRootToLeaf(root.left, sum + root.data, length + 1, maxLen, maxSum);
        sumOfRootToLeaf(root.right, sum + root.data, length + 1, maxLen, maxSum);
    }

    public int sumOfLongRootToLeafPath(Node root) {

        // Base case: if the tree is empty
        if (root == null) return 0;

        // Initializing the variables to
        // store the maximum length and sum
        int[] maxSum = {Integer.MIN_VALUE};
        int[] maxLen = {0};

        // Calling the utility function
        sumOfRootToLeaf(root, 0, 0, maxLen, maxSum);

        // Returning the maximum sum
        return maxSum[0];
    }
}
